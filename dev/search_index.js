var documenterSearchIndex = {"docs":
[{"location":"combinatorics/#Combinatorics","page":"Combinatorics","title":"Combinatorics","text":"","category":"section"},{"location":"combinatorics/","page":"Combinatorics","title":"Combinatorics","text":"TODO","category":"page"},{"location":"#JuLie.jl","page":"About","title":"JuLie.jl","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"JuLie.jl is an early-stage Julia/OSCAR package with the goal to provide structures and fast algorithms for things around algebraic Lie theory, representation theory, and relevant combinatorics. These fields are huge and this package is still small—I hope it will grow with time. Contributions are necessary and very much welcome!","category":"page"},{"location":"","page":"About","title":"About","text":"By Ulrich Thiel (ulthiel.com/math) and contributors.","category":"page"},{"location":"#Using","page":"About","title":"Using","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"To install the package, you first need to install Julia. Then after starting Julia, type the following:","category":"page"},{"location":"","page":"About","title":"About","text":"julia> using Pkg\njulia> Pkg.add(url=\"https://github.com/ulthiel/JuLie.jl\")","category":"page"},{"location":"","page":"About","title":"About","text":"Now, you can start using the package as follows:","category":"page"},{"location":"","page":"About","title":"About","text":"julia> using JuLie\njulia> partitions(10)","category":"page"},{"location":"","page":"About","title":"About","text":"You can get help for a function by putting a question mark in front, e.g.","category":"page"},{"location":"","page":"About","title":"About","text":"julia> ?partitions","category":"page"},{"location":"#Motivation","page":"About","title":"Motivation","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"Especially for combinatorics there's a lot already in other computer algebra systems. So, why another package? First, I hope this package will eventually form one pillar of the OSCAR project. What convinced me of Julia as programming language is its straightforward high-level syntax (like Python) paired with incredible performance (unlike Python). Have a look at the following examples creating the list (not an iterator) of all partitions of the integer 90 (there are ~56.6 million) in different computer algebra systems.","category":"page"},{"location":"","page":"About","title":"About","text":"In Sage (v9.1):","category":"page"},{"location":"","page":"About","title":"About","text":"sage: time X=Partitions(90).list()\nWall time: 3min 5s\n#Uses 26.665GiB mem, quitting Sage takes quite a bit of time","category":"page"},{"location":"","page":"About","title":"About","text":"In GAP (v4.11.0):","category":"page"},{"location":"","page":"About","title":"About","text":"gap> L:=Partitions(90);; time/1000.0;\n51.962\n#Uses 11.8477 GiB mem, still works fine","category":"page"},{"location":"","page":"About","title":"About","text":"In Magma (v2.25-5):","category":"page"},{"location":"","page":"About","title":"About","text":"> time X:=Partitions(90);\nTime: 32.990\n//Uses 15.688 GiB mem, Magma UNUSABLE from now on!!","category":"page"},{"location":"","page":"About","title":"About","text":"And now, in Julia (v1.5.2, my implementation):","category":"page"},{"location":"","page":"About","title":"About","text":"julia> @time partitions(Int8(90));\n5.447290 seconds (56.63 M allocations: 6.239 GiB, 46.77% gc time)\n#No problem afterwards","category":"page"},{"location":"","page":"About","title":"About","text":"I'm cheating here a bit because I'm using 8-bit integers (thus saving memory). But we can also use bigger integers and the Julia implementation is still more efficient:","category":"page"},{"location":"","page":"About","title":"About","text":"julia> @time partitions(Int64(90)); #this time with 64-bit integers\n16.481893 seconds (56.63 M allocations: 13.570 GiB, 57.15% gc time)\n#No problem","category":"page"},{"location":"","page":"About","title":"About","text":"Having the possibility to work with special integer types is very useful sometimes. Of course, you can do the same in C—but Julia is a high-level language with a similar simple syntax like Python, so why would anyone still go through such a pain?","category":"page"},{"location":"","page":"About","title":"About","text":"The Nemo package (part of OSCAR) provides incredibly fast arithmetic in various rings like integers, algebraic number fields, polynomial rings etc. that will be used here as well.","category":"page"},{"location":"#Developing","page":"About","title":"Developing","text":"","category":"section"},{"location":"#Setting-up-the-repository","page":"About","title":"Setting up the repository","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"Clone this repository to somewhere on your computer:","category":"page"},{"location":"","page":"About","title":"About","text":"git clone https://github.com/ulthiel/JuLie.jl","category":"page"},{"location":"","page":"About","title":"About","text":"Enter the directory \"JuLie.jl\", start Julia, hit the \"]\" key to enter REPL mode, and then add the package to the registry:","category":"page"},{"location":"","page":"About","title":"About","text":"dev .","category":"page"},{"location":"","page":"About","title":"About","text":"Exit the REPL mode by hitting the backspace key. Then you can start using the package as usual with","category":"page"},{"location":"","page":"About","title":"About","text":"using JuLie","category":"page"},{"location":"","page":"About","title":"About","text":"Any changes you make to the code now will not be available in the current Julia session—you have to restart it. This is simply the way Julia works but this is annoying when developing. A solution is to load the Revise package before loading the package.","category":"page"},{"location":"","page":"About","title":"About","text":"using Pkg\nPkg.add(\"Revise\")\nusing Revise\nusing JuLie","category":"page"},{"location":"","page":"About","title":"About","text":"Now, changes you make in the code are immediately available in the Julia session (except for changes to structures, here you need to restart).","category":"page"},{"location":"#Programming-guidelines","page":"About","title":"Programming guidelines","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"Have a look at the file src/partitions.jl to see how the stuff works and how I want code to look like.\nCheck out the Julia Documentation, especially the Style Guide and the Performance Guide.\nEverything has to be well-documented, algorithms and papers have to be properly referenced.\nIf your implementation is not more efficient than those in other computer algebra systems then it's not good enough. (Don't take this too seriously, but at least try.)\nFor every function you implement, there has to be a reasonable test in test/runtests.jl. You can run the complete unit test with Pkg.test(\"JuLie\").\nFor large number arithmetic we use Nemo (type fmpz with constructor ZZ for integers, type fmpq with constructor QQ for rationals, etc.). See the file src/enum_func.jl for examples. For more general rings (polynomial rings, laurent polynomial rings, etc.) we use AbstractAlgebra, see src/quantum_numbers.jl for examples. This is all part of the OSCAR system.","category":"page"},{"location":"#Contributors","page":"About","title":"Contributors","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"Tom Schmit (TU Kaiserslautern, 2020–)","category":"page"},{"location":"lie-theory/#Lie-Theory","page":"Lie theory","title":"Lie Theory","text":"","category":"section"},{"location":"lie-theory/","page":"Lie theory","title":"Lie theory","text":"TODO","category":"page"},{"location":"lie-theory/","page":"Lie theory","title":"Lie theory","text":"HACK: let's just insert all docstring here, for the fun; if you use separate (sub-)modules for combinatris vs Lie theory, you can split things.","category":"page"},{"location":"lie-theory/","page":"Lie theory","title":"Lie theory","text":"Modules = [JuLie]\nOrder   = [:function, :type]","category":"page"},{"location":"lie-theory/#Base.sum-Union{Tuple{Multipartition{T}}, Tuple{T}} where T<:Integer","page":"Lie theory","title":"Base.sum","text":"sum(P::Multipartition{T}) where T<:Integer\n\nIf P is a multipartition of the integer n, this function returns n.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.ascending_partitions-Tuple{Integer}","page":"Lie theory","title":"JuLie.ascending_partitions","text":"ascending_partitions(n::Integer;alg=\"ks\")\n\nInstead of encoding a partition of an integer n ≥ 0 as a descending sequence (which is our convention), one can also encode it as an ascending sequence. In the papers below it is claimed that generating the list of all ascending partitions is more efficient than generating descending ones. To test this, I have implemented the algorithms:\n\n\"ks\" (default) is the algorithm AccelAsc (Algorithm 4.1) by J. Kelleher and B. O'Sullivan, \"Generating All Partitions: A Comparison Of Two Encodings\", https://arxiv.org/pdf/0909.2331.pdf, May 2014.\n\"m\" is Algorithm 6 by M. Merca, \"Fast Algorithm for Generating Ascending Compositions\", J. Math Model. Algor. (2012) 11:89–104. This is similar to \"ks\".\n\nThe ascending partitions are given here as arrays, not of type Partition since these are descending by our convention. I am using \"ks\" as default since it looks slicker and I believe there is a tiny mistake in the publication of \"m\" (which I fixed).\n\nComparison\n\nI don't see a significant speed difference to the descending encoding:\n\njulia> @btime partitions(Int8(90));\n  3.376 s (56634200 allocations: 6.24 GiB)\n\njulia> @btime ascending_partitions(Int8(90),alg=\"ks\");\n  3.395 s (56634200 allocations: 6.24 GiB)\n\njulia> @btime ascending_partitions(Int8(90),alg=\"m\");\n  3.451 s (56634200 allocations: 6.24 GiB)\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.bump!-Tuple{Tableau,Integer,Tableau,Integer}","page":"Lie theory","title":"JuLie.bump!","text":"bump!(Tab::Tableau, x::Integer, Q::Tableau, y::Integer)\n\nInserts x into Tab according to the bumping algorithm by applying the Schensted insertion. Traces the change with Q by inserting y at the same Position in Q as x in Tab.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.bump!-Tuple{Tableau,Integer}","page":"Lie theory","title":"JuLie.bump!","text":"bump!(Tab::Tableau, x::Int)\n\nInserts the integer x into the tableau Tab according to the bumping algorithm by applying the Schensted insertion.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.catalan-Tuple{Nemo.fmpz}","page":"Lie theory","title":"JuLie.catalan","text":"catalan(n::fmpz; alg=\"binomial\")\ncatalan(n::Integer; alg=\"binomial\")\n\nThe n-th Catalan number. This counts a gazillion of things, see OEIS for more information. There are two algorithms implemented:\n\n\"binomial\" (default): uses a simple formula with binomial coefficients.\n\"iterative\": uses an iterative computation.\n\nThe binomial computation is much faster:\n\njulia> @time x=catalan( ZZ(10)^5 , alg=\"binomial\");\n 0.007727 seconds (9 allocations: 95.750 KiB)\n\njulia> @time x=catalan( ZZ(10)^5 , alg=\"iterative\");\n 1.572488 seconds (1.01 M allocations: 2.333 GiB, 1.36% gc time)\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.charge","page":"Lie theory","title":"JuLie.charge","text":"charge(word::Array{Int,1},standard=false::Bool)\n\nreturns the charge of the Tableau corresponding to the reading word word\n\n\n\n\n\n","category":"function"},{"location":"lie-theory/#JuLie.charge-Tuple{Tableau}","page":"Lie theory","title":"JuLie.charge","text":"charge(Tab::Tableau)\n\nreturns the charge of Tab.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.charge-Union{Tuple{Array{Partition{T},1}}, Tuple{T}} where T<:Integer","page":"Lie theory","title":"JuLie.charge","text":"charge(config::Array{Partition{T},1})\n\nreturns the charge of an admissible configuration config.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.conjugate-Union{Tuple{Partition{T}}, Tuple{T}} where T<:Integer","page":"Lie theory","title":"JuLie.conjugate","text":"conjugate(P::Partition{T}) where T<:Integer\n\nThe conjugate of a partition is obtained by considering its Young diagram (see Tableaux) and then flipping it along its main diagonal.\n\nFor more information see Wikipedia.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.dominates-Tuple{Partition,Partition}","page":"Lie theory","title":"JuLie.dominates","text":"dominates(lambda::Partition, mu::Partition)\n\nThe dominance order on partitions is the partial order ⊵ defined by λ ⊵ μ if and only if λ₁ + … + λᵢ ≥ μ₁ + … + μᵢ for all i. This function returns true if λ ⊵ μ.\n\nFor more information see Wikipedia.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.getelement-Tuple{Partition,Int64}","page":"Lie theory","title":"JuLie.getelement","text":"getelement(P::Partition, i::Int)\n\nSometimes in algorithms for partitions it is convenient to be able to access parts beyond the length of the partition, and then you want to get zero instead of an error. This function is a shortcut for\n\nreturn (i>length(P.p) ? 0 : getindex(P.p,i))\n\nIf you are sure that P[i] exists, use getindex because this will be faster.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.hook_length-Tuple{Partition,Integer,Integer}","page":"Lie theory","title":"JuLie.hook_length","text":"hook_length(lambda::Partition, i::Integer, j::Integer)\n\nConsider the Young diagram of a partition λ. The hook length of a box, is the number of boxes to the right in the same row + the number of boxes below in the same column + 1. The function returns the hook length of the box with coordinates (i,j). The functions assumes that the box exists.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.hook_length-Tuple{Tableau,Integer,Integer}","page":"Lie theory","title":"JuLie.hook_length","text":"hook_length(Tab::Tableau, i::Integer, j::Integer)\n\nShortcut for hook_length(shape(Tab),i,j).\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.hook_lengths-Tuple{Partition}","page":"Lie theory","title":"JuLie.hook_lengths","text":"hook_lengths(lambda::Partition)\n\nReturns the tableau of shape λ in which the entry at position (i,j) is equal to the hook length of the corresponding box.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.is_cartan_matrix-Tuple{CartanMatrix}","page":"Lie theory","title":"JuLie.is_cartan_matrix","text":"is_cartan_matrix(C::CartanMatrix)\n\nreturns true iff C is a (generalized) Cartan matrix.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.is_semistandard-Tuple{Tableau}","page":"Lie theory","title":"JuLie.is_semistandard","text":"is_semistandard(Tab::Tableau)\n\nA tableau is called semistandard if the entries weakly increase along each row and strictly increase down each column.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.is_standard-Tuple{Tableau}","page":"Lie theory","title":"JuLie.is_standard","text":"is_standard(Tab::Tableau)\n\nA tableau is called standard if it is semistandard and the entries are in bijection with 1,…n, where n is the number of boxes.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.kostka_polynomial-Tuple{Array{Int64,1},Array{Int64,1}}","page":"Lie theory","title":"JuLie.kostka_polynomial","text":"kostka_polynomial(lambda::Array{Integer,1}, mu::Array{Integer,1})\n\nShortcut for kostka_polynomial.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.kostka_polynomial-Union{Tuple{T}, Tuple{Partition{T},Partition{T}}} where T<:Integer","page":"Lie theory","title":"JuLie.kostka_polynomial","text":"kostka_polynomial(lambda::Partition{T}, mu::Partition{T})\n\nThe (one-variable) Kostka polymial K_λμ(t) associated to partitions λ and μ can be defined as\n\nK_λμ(t) = _T  SSYT(λμ) t^charge(T)  ℕt  \n\nwhere SSYT(λ,μ) is the set of all semistandard Young tableaux of shape λ and weight μ, and charge(T) is the charge of the tableau T. The Kostka polynomials relate the Hall–Littlewood polynomials P_μ to the Schur polynomials s_λ via\n\ns_λ(x_1x_n) = sum_μ K_λμ(t)P_μ(x_1x_nt)\n\nThis function returns the Kostka polynomial K_λμ(t) as an fmpz_poly over ZZ in t.\n\nExample\n\njulia> kostka_polynomial([4,2,1],[3,2,1,1])\nt^3 + 2*t^2 + t\n\nAlgorithm\n\nThe computation here is not based on the above formula but on an explicit description due to Kirillov–Reshetikhin in \"The Bethe ansatz and the combinatorics of Young tableaux\", J. Sov. Math. 41 (1988) 925., which is summarized by Dorey–Tonga–Turner in \"A matrix model for WZW\" (Apendix B). Namely:\n\nK_λμ(t)=_v_K=1^l(λ)-1_n1\nbeginbmatrix\nℙ_n^(K)+m_n(v^(K))\nm_n(v^(K))\nendbmatrix_t \n\nwhere the sum is over all admissible configurations v i.e. sequences of partitions v^(K) with\n\nv^(0)=μ text hspace2mm  v^(K)=_jK+1λ_j texthspace5mm and hspace5mm ℙ_n^(K)0  texthspace2mm for all hspace1mm n0 K=01l(λ)\n\nbeginaligned\n ℙ_n^(K) = _j1leftminleft(nv_j^(K+1)right) - 2minleft(nv_j^(K)right) + minleft(nv_j^(K-1)right)right\n\n c(v) = _i1(i-1)μ_i + _K=1^l(λ)-1left(𝕄leftv^(K) v^(K)right - 𝕄leftv^(K) v^(K-1)rightright)\n\n 𝕄ρκ = _ij1 min(ρ_iκ_j)\nendaligned\n\nHere, leftgenfrac0pt0mn right_t is the Gaussian binomial coefficient.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.lucas-Tuple{Nemo.fmpz}","page":"Lie theory","title":"JuLie.lucas","text":"lucas(n::fmpz)\nlucas(n::Integer)\n\nThe n-th Lucas number. For more information on these numbers, see OEIS. The implementation is a wrapper to the function in GMP.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.multipartitions-Union{Tuple{T}, Tuple{T,Integer}} where T<:Integer","page":"Lie theory","title":"JuLie.multipartitions","text":"multipartitions(n::T, r::Integer) where T<:Integer\n\nA list of all r-component multipartitions of n.\n\nExample\n\njulia> multipartitions(Int8(3),2) #Using 8-bit integers\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.multiset_partitions-Tuple{T} where T<:Integer","page":"Lie theory","title":"JuLie.multiset_partitions","text":"multiset_partitions(n::T) where T<:Integer\n\nA list of all multiset_partitions of an integer n  0.\n\nThe performance will suffer by casting n into a smaller integer type, e.g.\n\nmultiset_partitions(Int8(20))\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.multiset_partitions-Union{Tuple{Partition{T}}, Tuple{T}} where T<:Integer","page":"Lie theory","title":"JuLie.multiset_partitions","text":"multiset_partitions(p::Partition{T})  where T<:Integer\n\nA list of all possible multiset_partitions of a Partition, by regrouping its parts into Partitions.\n\nThe algorithm used is the algorithm M by , \"The Art of Computer Programming - Volume 4A, Combinatotial Algorithms, Part 1\" by Donald E. Knuth(2011), 429–430. De-gotoed, index-shifted and generalized.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.multiset_partitions-Union{Tuple{T}, Tuple{Partition{T},Integer}} where T<:Integer","page":"Lie theory","title":"JuLie.multiset_partitions","text":"multiset_partitions(p::Partition{T}, r::Integer) where T<:Integer\n\nA list of all possible r-restricted multiset_partitions of a Partition, by regrouping its parts into Partitions.\n\nThe algorithm used is a version of the algorithm M by , \"The Art of Computer Programming - Volume 4A, Combinatotial Algorithms, Part 1\" by Donald E. Knuth, 429–430 http://www.cs.utsa.edu/~wagner/knuth/fasc3b.pdf. De-gotoed, index-shifted and generalized.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.multiset_partitions-Union{Tuple{T}, Tuple{T,Integer}} where T<:Integer","page":"Lie theory","title":"JuLie.multiset_partitions","text":"multiset_partitions(n::T, r::Integer) where T<:Integer\n\nA list of all multiset_partitions of an integer n  0 into r  1 parts.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.num_partitions-Tuple{Nemo.fmpz,Nemo.fmpz}","page":"Lie theory","title":"JuLie.num_partitions","text":"num_partitions(n::fmpz, k::fmpz)\nnum_partitions(n::Integer, k::Integer)\n\nThe number of integer partitions of the integer n  0 into k  0 parts. The implementation uses a recurrence relation.\n\nFor more information on these numbers, see OEIS.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.num_partitions-Tuple{Nemo.fmpz}","page":"Lie theory","title":"JuLie.num_partitions","text":"num_partitions(n::fmpz)\nnum_partitions(n::Integer)\n\nThe number of integer partitions of the integer n  0. Uses the function from FLINT, which is really fast.\n\nFor more information on these numbers, see OEIS.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.num_standard_tableaux-Tuple{Partition}","page":"Lie theory","title":"JuLie.num_standard_tableaux","text":"num_standard_tableaux(lambda::Partition)\n\nReturns the number f^lambda of standard tableaux of shape λ using the hook length formula\n\nf^lambda = fracnprod_ij h_lambda(ij) \n\nwhere the product is taken over all boxes in the Young diagram of lambda and h_lambda denotes the hook length of the box (i,j).\n\nFor my information, see Wikipedia.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.partcount_to_partition-Union{Tuple{Array{T,1}}, Tuple{T}} where T<:Integer","page":"Lie theory","title":"JuLie.partcount_to_partition","text":"partcount_to_partition(pc::Array{T,1}) where T<:Integer\n\nreturns the partition from a part-count representation pc of a partition.\n\njulia> partcount_to_partition([2,0,1])\n  [3,1,1]\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.partition_to_partcount-Union{Tuple{Partition{T}}, Tuple{T}} where T<:Integer","page":"Lie theory","title":"JuLie.partition_to_partcount","text":"partition_to_partcount(p::Partition{T})  where T<:Integer\n\nreturns the part-count representation of a partition p, where the n-th element is the count of appearances of n in p.\n\njulia> partition_to_partcount([5,3,3,3,2,1,1])\n  5-element Array{Int64,1}:\n  2\n  1\n  3\n  0\n  1\n\nfor performance, partitions with trailing zeroes will not be allowed.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.partitions-NTuple{4,Integer}","page":"Lie theory","title":"JuLie.partitions","text":"partitions(m::Integer, n::Integer, l1::Integer, l2::Integer; z=0)\n\nA list of all partitions of an integer m ≥ 0 into n ≥ 0 parts with lower bound l1 ≥ 0 and upper bound l2 ≥ l1 for the parts. There are two choices for the parameter z:\n\nz=0: no further restriction (default);\nz=1: only distinct parts.\n\nThe partitions are produced in decreasing order.\n\nThe algorithm used is \"parta\" by W. Riha and K. R. James, \"Algorithm 29. Efficient Algorithms for Doubly and Multiply Restricted Partitions\" (1976). De-gotoed from ALGOL code by Elisa!\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.partitions-Tuple{Integer,Integer}","page":"Lie theory","title":"JuLie.partitions","text":"partitions(m::Integer, n::Integer)\n\nAll partitions of an integer m ≥ 0 into n ≥ 1 parts (no further restrictions). This simply calls partitions(m,n,1,m,z=0).\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.partitions-Tuple{Integer}","page":"Lie theory","title":"JuLie.partitions","text":"partitions(n::Integer)\n\nA list of all partitions of an integer n ≥ 0, produced in lexicographically descending order. This ordering is like in SAGE, but opposite to GAP. You can apply reverse() to reverse the order. As usual, you may increase performance by using smaller integer types.\n\nThe algorithm used is the algorithm ZS1 by A. Zoghbi and I. Stojmenovic, \"Fast algorithms for generating integer partitions\", Int. J. Comput. Math. 70 (1998), no. 2, 319–332.\n\nExample\n\njulia> partitions(Int8(90)) #Using 8-bit integers\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.quantum-Tuple{Int64,AbstractAlgebra.RingElem}","page":"Lie theory","title":"JuLie.quantum","text":"quantum(n::Int, q::RingElem)\n\nThis is a shortcut for quantum_number(n,q).\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.quantum-Tuple{Int64}","page":"Lie theory","title":"JuLie.quantum","text":"quantum(n::Int)\n\nThis is a shortcut for quantum_number(n).\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.quantum_number-Tuple{Int64,AbstractAlgebra.RingElem}","page":"Lie theory","title":"JuLie.quantum_number","text":"quantum_number(n::Int, q::RingElem)\n\nFor an integer n ≥ 0 and an invertible element q of a ring R, the quantum integer n_q in R is for n ≥ 0 defined as n_q = sum_i=0^n-1 q^n-(2i+1) and for n < 0 as n_q = --n_q.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.quantum_number-Tuple{Int64}","page":"Lie theory","title":"JuLie.quantum_number","text":"quantum_number(n::Int)\n\nThe quantum number n_q where q is the interdeterminate of the Laurent polynomial ring mathbbZqq^-1 in one variable over the integers.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.reading_word-Tuple{Tableau}","page":"Lie theory","title":"JuLie.reading_word","text":"reading_word(Tab::Tableau)\n\nThe reading word of a tableau is the word obtained by concatenating the fillings of the rows, starting from the bottom row. The word is here returned as an array.\n\nExample\n\njulia> reading_word(Tableau([ [1,2,3] , [4,5] , [6] ]))\n6-element Array{Int64,1}:\n 6\n 4\n 5\n 1\n 2\n 3\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.schensted-Union{Tuple{Array{T,1}}, Tuple{T}} where T<:Integer","page":"Lie theory","title":"JuLie.schensted","text":"schensted(sigma::Array{Integer,1})\n\nThe Robinson–Schensted correspondence is a bijection between permutations and pairs of standard Young tableaux of the same shape. For a permutation sigma (given as an array), this function performs the Schnested algorithm and returns the corresponding pair of standard tableaux (the insertion and recording tableaux).\n\nFor more information, see Wikipedia.\n\nExample\n\njulia> schensted([3,1,6,2,5,4])\n(AbstractArray{Int64,1}[[1, 2, 4], [3, 5], [6]], AbstractArray{Int64,1}[[1, 3, 5], [2, 4], [6]])\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.schur_polynomial-Union{Tuple{Partition{T}}, Tuple{T}} where T<:Integer","page":"Lie theory","title":"JuLie.schur_polynomial","text":"schur_polynomial(shp::Partition)\n\nreturns the Schur function s_shp as a Multivariate Polynomial.\n\ns_shp=_T x_1^m_1x_n^m_n\n\nwhere the sum is taken over all semistandard tableaux T of shape shp, and m_i gives the weight of i in T.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.semistandard_tableaux-Union{Tuple{Array{T,1}}, Tuple{T}, Tuple{Array{T,1},Any}} where T<:Integer","page":"Lie theory","title":"JuLie.semistandard_tableaux","text":"semistandard_tableaux(shape::Partition{T}, max_val=sum(shape)::Integer) where T<:Integer\n\nShortcut for semistandard_tableaux(Partition(shape),max_val).\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.semistandard_tableaux-Union{Tuple{Partition{T}}, Tuple{T}, Tuple{Partition{T},Any}} where T<:Integer","page":"Lie theory","title":"JuLie.semistandard_tableaux","text":"semistandard_tableaux(shape::Partition{T}, max_val=sum(shape)::Integer) where T<:Integer\n\nReturns a list of all semistandard tableaux of given shape and filling elements bounded by max_val. By default, max_val is equal to the sum of the shape partition (the number of boxes in the Young diagram). The list of tableaux is in lexicographic order from left to right and top to bottom.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.semistandard_tableaux-Union{Tuple{T}, Tuple{Array{T,1},Array{T,1}}} where T<:Integer","page":"Lie theory","title":"JuLie.semistandard_tableaux","text":"semistandard_tableaux(s::Array{T,1}, weight::Array{T,1}) where T<:Integer\n\nReturns a list of all semistandard tableaux with shape s and given weight. This requires that sum(s) = sum(weight).\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.semistandard_tableaux-Union{Tuple{T}, Tuple{Partition{T},Partition{T}}} where T<:Integer","page":"Lie theory","title":"JuLie.semistandard_tableaux","text":"semistandard_tableaux(s::Partition{T}, weight::Partition{T}) where T<:Integer\n\nSame as for semistandard_tableaux(s::Array{T,1}, weight::Array{T,1}) where T<:Integer.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.semistandard_tableaux-Union{Tuple{T}, Tuple{T,Any}} where T<:Integer","page":"Lie theory","title":"JuLie.semistandard_tableaux","text":"semistandard_tableaux(box_num::T, max_val=box_num::T) where T<:Integer\n\nReturns a list of all semistandard tableaux consisting of box_num boxes and filling elements bounded by max_val.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.shape-Union{Tuple{Tableau{T}}, Tuple{T}} where T","page":"Lie theory","title":"JuLie.shape","text":"shape(Tab::Tableau{T})\n\nReturns the shape of a tableau.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.standard_tableaux-Tuple{Integer}","page":"Lie theory","title":"JuLie.standard_tableaux","text":"standard_tableaux(n::Integer)\n\nReturns a list of all standard tableaux with n boxes.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.standard_tableaux-Tuple{Partition}","page":"Lie theory","title":"JuLie.standard_tableaux","text":"standard_tableaux(s::Partition)\n\nReturns a list of all standard tableaux of a given shape.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.standard_tableaux-Union{Tuple{Array{T,1}}, Tuple{T}} where T<:Integer","page":"Lie theory","title":"JuLie.standard_tableaux","text":"standard_tableaux(s::Array{Integer,1})\n\nShortcut for standard_tableaux(Partition(s)).\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.stirling1-Tuple{Nemo.fmpz,Nemo.fmpz}","page":"Lie theory","title":"JuLie.stirling1","text":"stirling1(n::fmpz, k::fmpz)\nstirling1(n::Integer, k::Integer)\n\nThe Stirling number S_1(nk) of the first kind. The absolute value of S_1(nk) counts the number of permutations of n elements with k disjoint cycles. The implementation is a wrapper to the function in FLINT.\n\nFor more information on these numbers, see OEIS.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.stirling2-Tuple{Nemo.fmpz,Nemo.fmpz}","page":"Lie theory","title":"JuLie.stirling2","text":"stirling2(n::fmpz, k::fmpz)\nstirling2(n::Integer, k::Integer)\n\nThe Stirling number S_2(nk) of the second kind. This counts the number of partitions of an n-set into k non-empty subsets. The implementation is a wrapper to the function in FLINT.\n\nFor more information on these numbers, see OEIS.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.weight-Tuple{Tableau}","page":"Lie theory","title":"JuLie.weight","text":"weight(Tab::Tableau)\n\nThe weight of a tableau is the number of times each number appears in the tableau. The return value is an array whose i-th element gives the number of times the integer i appears in the tableau.\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.CartanMatrix","page":"Lie theory","title":"JuLie.CartanMatrix","text":"struct CartanMatrix{T} <: MatElem{T}\n\nA (generalized) Cartan matrix C is a square matrix over the integers, satisfying the following rules:\n\nbeginaligned\n C_ii = 2  \n\n C_ij  0 quad text for  quad ij \n\n C_ij = 0 quad Leftrightarrow quad  C_ji = 0\nendaligned\n\nWe implement them as MatElem from AbstractAlgebra.jl over fmpz.\n\nYou can create a CartanMatrix with\n\nCartanMatrix( \"A4~\" )     #calls essentially CartanMatrix('A', 4, true)\nCartanMatrix( \"C6\" )      #calls essentially CartanMatrix('C', 6)\n\nwhich generates the CartanMatrix: tildeA_4 resp. C_6\n\nIf you would like to generate block diagonal matrices you can do so with\n\nCartanMatrix([\"A3~\",\"G2\",\"B12\"])    #calls essentially CartanMatrix(['A','G','B'],[3,2,12],[true,false,false])\n\n\n\n\n\n","category":"type"},{"location":"lie-theory/#JuLie.CartanMatrix-2","page":"Lie theory","title":"JuLie.CartanMatrix","text":"CartanMatrix(type::Char, dim::Int, tilde=false::Bool)\n\ngenerates the CartanMatrix tildetype_dim if tilde = true and type_dim otherwise\n\nfor example you could call:\n\nCartanMatrix('A',12,true)\nCartanMatrix('C',7)\n\n\n\n\n\n","category":"type"},{"location":"lie-theory/#JuLie.CartanMatrix-Tuple{Array{Char,1},Array{Int64,1},BitArray{1}}","page":"Lie theory","title":"JuLie.CartanMatrix","text":"CartanMatrix(types::Array{Char,1}, dims::Array{Int,1}, tildes::BitArray{1})\n\ngenerates the Cartan block matrix types1_dims1  tildetypes2_dims2  if for example tildes1=true tildes2=false \n\nfor example you could call:\n\nCartanMatrix( [\"A\", \"B\", \"C\"], [12, 7, 9], [true, false, true] )\n\nwhich would return the same as\n\nCartanMatrix( [ \"A12~\" , \"B7\" , \"C9~\" ] )\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.CartanMatrix-Tuple{Array{String,1}}","page":"Lie theory","title":"JuLie.CartanMatrix","text":"CartanMatrix(types::Array{String,1})\n\ngenerates the Cartan block matrix defined by types whose elements should be of the following form: \"LN~\" or \"LN\" with L ∈ {A,B,C,D,E,F,G} and N ∈ ℕ.\n\nfor example you could call:\n\nCartanMatrix( [ \"A12~\" , \"B7\" , \"C9~\" ] )\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.CartanMatrix-Tuple{String}","page":"Lie theory","title":"JuLie.CartanMatrix","text":"CartanMatrix(type::String)\n\ngenerates the CartanMatrix defined by type which should be of the following form: \"LN~\" or \"LN\" with L ∈ {A,B,C,D,E,F,G} and N ∈ ℕ.\n\nCartanMatrix(\"LN~\")\nCartanMatrix(\"LN\")\n\nreturns tildeL_N or L_N respectively.\n\nfor example you could call:\n\nCartanMatrix(\"A12~\")\n\n\n\n\n\n","category":"method"},{"location":"lie-theory/#JuLie.Multipartition","page":"Lie theory","title":"JuLie.Multipartition","text":"Multipartition{T} <: AbstractArray{Partition{T},1}\n\nMultipartitions are generalizations of partitions. An r-component multipartition of an integer n is an r-tuple of partitions λ¹, λ², …, λʳ where each λⁱ is a partition of some integer nᵢ ≥ 0 and the nᵢ sum to n. As for partitions, we have implemented an own type Multipartition{T} which is a subtype of AbstractArray{Partition{T},1}. As with partitions, you can can use smaller integer types to increase performance.\n\nExample\n\njulia> P=Multipartition( [[2,1], [], [3,2,1]] )\njulia> sum(P)\n9\njulia> P[2]\nInt64[]\njulia> Multipartition( Array{Int8,1}[[2,1], [], [3,2,1]] ) #Using 8-bit integers\n\n\n\n\n\n","category":"type"},{"location":"lie-theory/#JuLie.Partition","page":"Lie theory","title":"JuLie.Partition","text":"Partition{T} <: AbstractArray{T,1}\n\nA partition of an integer n ≥ 0 is a decreasing sequence λ=(λ₁,…,λᵣ) of positive integers λᵢ whose sum is equal to n. The λᵢ are called the parts of the partition. We encode a partition as an array with elements λᵢ. To be able to conceptually work with partitions we have implemented an own type Partition{T} as subtype of AbstractArray{T,1}. All functions for arrays then also work for partitions. You may increase performance by using smaller integer types, see the example below. For efficiency, the Partition constructor does not check whether the given array is in fact a partition, i.e. a decreasing sequence.\n\nFor more general information on partitions, check out Wikipedia.\n\nExample\n\njulia> P=Partition([3,2,1]) #The partition 3+2+1 of 6\njulia> sum(P) #The sum of the parts.\n6\njulia> P[1] #First component\n3\njulia> P=Partition(Int8[3,2,1]) #Same partition but using 8 bit integers\n\nRemarks\n\nUsually, |λ| ≔ n is called the size of λ. In Julia, the function size for arrays already exists and returns the dimension of an array. Instead, you can use sum to get the sum of the parts.\nThere is no performance impact by using an own type for partitions rather than simply using arrays—I've tested this. Julia is great. The implementation of a subtype of AbstractArray is explained in the Julia documentation.\n\n\n\n\n\n","category":"type"},{"location":"lie-theory/#JuLie.Tableau","page":"Lie theory","title":"JuLie.Tableau","text":"Tableau{T} <: AbstractArray{AbstractArray{T,1},1}\n\nA Young diagram is a diagram of finitely many empty \"boxes\" arranged in left-justified rows, with the row lengths in non-increasing order. The box in row i and and column j has the coordinates (i,j). Listing the number of boxes in each row gives a partition λ of a non-negative integer n (the total number of boxes of the diagram). The diagram is then said to be of shape λ. Conversely, one can associate to any partition λ a Young diagram in the obvious way, so Young diagrams are just another way to look at partitions.\n\nA Young tableau of shape λ is a filling of the boxes of the Young diagram of λ with elements from some set. After relabeling we can (and will) assume that we fill from a set of integers from 1 up to some number, which in applications is often equal to n. We encode a tableau as an array of arrays and we have implemented an own type Tableau{T}  as subtype of AbstractArray{AbstractArray{T,1},1} to work with tableaux. As for partitions, you may increase performance by casting into smaller integer types, e.g.\n\nFor efficiency, we do not check whether the given array is really a tableau, i.e. whether the structure of the array defines a partition.\n\nFor more information see Wikipedia.\n\nExample\n\nTab=Tableau([[1,2,3],[4,5],[6]])\nTab=Tableau(Array{Int8,1}[[2,1], [], [3,2,1]]) #Using 8 bit integers\n\n\n\n\n\n","category":"type"}]
}
